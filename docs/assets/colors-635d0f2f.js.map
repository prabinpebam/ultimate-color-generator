{"version":3,"file":"colors-635d0f2f.js","sources":["../../src/algorithms/colorModels/conversions.ts","../../src/algorithms/colorModels/rgb.ts"],"sourcesContent":["import { HSLColor, LABColor, RGBColor } from '../../types/color';\r\n\r\n/**\r\n * Converts RGB color to HSL\r\n */\r\nexport function rgbToHSL(rgb: RGBColor): HSLColor {\r\n  const [r, g, b] = rgb.map(v => v / 255);\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  const delta = max - min;\r\n  \r\n  let h = 0;\r\n  let s = 0;\r\n  const l = (max + min) / 2;\r\n  \r\n  if (delta !== 0) {\r\n    s = l > 0.5 \r\n      ? delta / (2 - max - min) \r\n      : delta / (max + min);\r\n    \r\n    switch (max) {\r\n      case r:\r\n        h = ((g - b) / delta + (g < b ? 6 : 0)) * 60;\r\n        break;\r\n      case g:\r\n        h = ((b - r) / delta + 2) * 60;\r\n        break;\r\n      case b:\r\n        h = ((r - g) / delta + 4) * 60;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return [h, s * 100, l * 100];\r\n}\r\n\r\n/**\r\n * Converts HSL color to RGB\r\n */\r\nexport function hslToRGB(hsl: HSLColor): RGBColor {\r\n  let [h, s, l] = hsl;\r\n  h /= 360;\r\n  s /= 100;\r\n  l /= 100;\r\n  \r\n  let r, g, b;\r\n  \r\n  if (s === 0) {\r\n    r = g = b = l;\r\n  } else {\r\n    const hue2rgb = (p: number, q: number, t: number) => {\r\n      if (t < 0) t += 1;\r\n      if (t > 1) t -= 1;\r\n      if (t < 1/6) return p + (q - p) * 6 * t;\r\n      if (t < 1/2) return q;\r\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n      return p;\r\n    };\r\n    \r\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const p = 2 * l - q;\r\n    \r\n    r = hue2rgb(p, q, h + 1/3);\r\n    g = hue2rgb(p, q, h);\r\n    b = hue2rgb(p, q, h - 1/3);\r\n  }\r\n  \r\n  return [\r\n    Math.round(r * 255),\r\n    Math.round(g * 255),\r\n    Math.round(b * 255)\r\n  ];\r\n}\r\n\r\n/**\r\n * Simplified RGB to LAB conversion\r\n * Note: This is a simplified implementation for demonstration purposes\r\n */\r\nexport function rgbToLAB(rgb: RGBColor): LABColor {\r\n  // This is a simplified implementation\r\n  const [r, g, b] = rgb;\r\n  \r\n  // Simplified L calculation (luminance)\r\n  const l = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n  \r\n  // Simplified a and b calculations\r\n  const a = 128 + (r - g) / 2;\r\n  const b_value = 128 + (g - b) / 2;\r\n  \r\n  return [l / 255 * 100, a - 128, b_value - 128];\r\n}\r\n\r\n/**\r\n * Converts LAB color to RGB (placeholder implementation)\r\n */\r\nexport function labToRGB(lab: LABColor): RGBColor {\r\n  // This is a simplified placeholder implementation\r\n  // Would need proper LAB -> XYZ -> RGB conversion\r\n  const [L, a, b] = lab;\r\n  \r\n  // Very simplified conversion for basic functionality\r\n  return [\r\n    Math.max(0, Math.min(255, Math.round(L * 2.55 + a))),\r\n    Math.max(0, Math.min(255, Math.round(L * 2.55 - a / 2))),\r\n    Math.max(0, Math.min(255, Math.round(L * 2.55 - b)))\r\n  ];\r\n}\r\n\r\nexport default {\r\n  rgbToHSL,\r\n  hslToRGB,\r\n  rgbToLAB,\r\n  labToRGB\r\n};\r\n","import { RGBColor } from '../../types/color';\r\n\r\n/**\r\n * Normalizes RGB values from 0-255 range to 0-1 range\r\n */\r\nexport function normalizeRGB(r: number, g: number, b: number): [number, number, number] {\r\n  return [r / 255, g / 255, b / 255];\r\n}\r\n\r\n/**\r\n * Converts normalized RGB values (0-1) back to 0-255 range\r\n */\r\nexport function denormalizeRGB(r: number, g: number, b: number): RGBColor {\r\n  return [\r\n    Math.round(r * 255),\r\n    Math.round(g * 255),\r\n    Math.round(b * 255)\r\n  ];\r\n}\r\n\r\n/**\r\n * Converts RGB color to hex string\r\n */\r\nexport function rgbToHex(rgb: RGBColor): string {\r\n  const [r, g, b] = rgb;\r\n  return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;\r\n}\r\n\r\n/**\r\n * Converts hex string to RGB color\r\n */\r\nexport function hexToRgb(hex: string): RGBColor {\r\n  // Remove # if present\r\n  const cleanHex = hex.charAt(0) === '#' ? hex.substring(1) : hex;\r\n  \r\n  // Parse the hexadecimal strings to integers\r\n  const r = parseInt(cleanHex.substring(0, 2), 16);\r\n  const g = parseInt(cleanHex.substring(2, 4), 16);\r\n  const b = parseInt(cleanHex.substring(4, 6), 16);\r\n  \r\n  // Check if the result is valid\r\n  if (isNaN(r) || isNaN(g) || isNaN(b)) {\r\n    throw new Error(`Invalid hex color: ${hex}`);\r\n  }\r\n  \r\n  return [r, g, b];\r\n}\r\n\r\n/**\r\n * Converts a number to a 2-digit hex string\r\n */\r\nfunction componentToHex(c: number): string {\r\n  const hex = Math.max(0, Math.min(255, Math.round(c))).toString(16);\r\n  return hex.length === 1 ? '0' + hex : hex;\r\n}\r\n\r\n/**\r\n * Calculates the relative luminance of an RGB color\r\n * Formula from WCAG 2.0 https://www.w3.org/TR/WCAG20-TECHS/G17.html\r\n */\r\nexport function calculateRelativeLuminance(rgb: RGBColor): number {\r\n  // Convert RGB to linear sRGB values\r\n  const [r, g, b] = normalizeRGB(...rgb).map(channel => {\r\n    return channel <= 0.03928\r\n      ? channel / 12.92\r\n      : Math.pow((channel + 0.055) / 1.055, 2.4);\r\n  });\r\n  \r\n  // Apply coefficients for the human eye's sensitivity\r\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n}\r\n"],"names":["hslToRGB","hsl","h","s","l","r","g","b","hue2rgb","p","q","t","rgbToLAB","rgb","a","b_value","rgbToHex","componentToHex","c","hex"],"mappings":"AAuCO,SAASA,EAASC,EAAyB,CAChD,GAAI,CAACC,EAAGC,EAAGC,CAAC,EAAIH,EACXC,GAAA,IACAC,GAAA,IACAC,GAAA,IAEL,IAAIC,EAAGC,EAAGC,EAEV,GAAIJ,IAAM,EACRE,EAAIC,EAAIC,EAAIH,MACP,CACL,MAAMI,EAAU,CAACC,EAAWC,EAAWC,KACjCA,EAAI,IAAQA,GAAA,GACZA,EAAI,IAAQA,GAAA,GACZA,EAAI,mBAAYF,GAAKC,EAAID,GAAK,EAAIE,EAClCA,EAAI,GAAYD,EAChBC,EAAI,kBAAYF,GAAKC,EAAID,IAAM,kBAAME,GAAK,EACvCF,GAGHC,EAAIN,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCM,EAAI,EAAIL,EAAIM,EAElBL,EAAIG,EAAQC,EAAGC,EAAGR,EAAI,EAAE,CAAC,EACrBI,EAAAE,EAAQC,EAAGC,EAAGR,CAAC,EACnBK,EAAIC,EAAQC,EAAGC,EAAGR,EAAI,EAAE,CAAC,CAC3B,CAEO,MAAA,CACL,KAAK,MAAMG,EAAI,GAAG,EAClB,KAAK,MAAMC,EAAI,GAAG,EAClB,KAAK,MAAMC,EAAI,GAAG,CAAA,CAEtB,CAMO,SAASK,EAASC,EAAyB,CAEhD,KAAM,CAACR,EAAGC,EAAGC,CAAC,EAAIM,EAGZT,EAAI,MAASC,EAAI,MAASC,EAAI,MAASC,EAGvCO,EAAI,KAAOT,EAAIC,GAAK,EACpBS,EAAU,KAAOT,EAAIC,GAAK,EAEhC,MAAO,CAACH,EAAI,IAAM,IAAKU,EAAI,IAAKC,EAAU,GAAG,CAC/C,CCnEO,SAASC,EAASH,EAAuB,CAC9C,KAAM,CAACR,EAAGC,EAAGC,CAAC,EAAIM,EACX,MAAA,IAAII,EAAeZ,CAAC,CAAC,GAAGY,EAAeX,CAAC,CAAC,GAAGW,EAAeV,CAAC,CAAC,EACtE,CAyBA,SAASU,EAAeC,EAAmB,CACzC,MAAMC,EAAM,KAAK,IAAI,EAAG,KAAK,IAAI,IAAK,KAAK,MAAMD,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,EACjE,OAAOC,EAAI,SAAW,EAAI,IAAMA,EAAMA,CACxC"}