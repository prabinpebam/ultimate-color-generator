{"version":3,"file":"index-b77839bc.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/context/ThemeContext.tsx","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/algorithms/generation/seedBased.ts","../../src/context/HistoryContext.tsx","../../src/context/PaletteContext.tsx","../../src/context/SettingsContext.tsx","../../src/components/layout/Header.tsx","../../src/components/layout/Sidebar.tsx","../../src/hooks/usePalette.ts","../../src/components/generate/PaletteBoard/Swatch.tsx","../../src/components/generate/PaletteBoard/SwatchGrid.tsx","../../src/components/generate/InputDrawer/SeedPicker.tsx","../../src/algorithms/generation/semantic.ts","../../src/components/generate/InputDrawer/SemanticInput.tsx","../../src/components/generate/InputDrawer/ImageUpload.tsx","../../src/components/generate/InputDrawer/InputDrawer.tsx","../../src/pages/GeneratePage.tsx","../../src/components/preview/WebpageMock.tsx","../../src/components/preview/DashboardMock.tsx","../../src/components/preview/MobileMock.tsx","../../src/components/preview/EmailMock.tsx","../../src/components/export/ExportDrawer.tsx","../../src/components/export/ExportButton.tsx","../../src/pages/PreviewPage.tsx","../../src/pages/NotFound.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { createContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype ThemeType = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: ThemeType;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nexport const ThemeContext = createContext<ThemeContextType>({\r\n  theme: 'light',\r\n  toggleTheme: () => {}\r\n});\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\r\n  const [theme, setTheme] = useState<ThemeType>(() => {\r\n    // Check if theme is stored in localStorage\r\n    const savedTheme = localStorage.getItem('theme') as ThemeType | null;\r\n    if (savedTheme) {\r\n      return savedTheme;\r\n    }\r\n    \r\n    // Use system preference as default\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n  });\r\n  \r\n  useEffect(() => {\r\n    // Update data-theme attribute when theme changes\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    \r\n    // Save theme preference to localStorage\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n  \r\n  const toggleTheme = () => {\r\n    setTheme(current => current === 'light' ? 'dark' : 'light');\r\n  };\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { HSLColor, HarmonyType } from '../../types/color';\r\n\r\n/**\r\n * Generates a palette from a seed color using color harmony principles\r\n * \r\n * @param seedColor - Base HSL color to build palette around\r\n * @param paletteSize - Number of colors to generate\r\n * @param harmonyType - Type of color harmony to use\r\n * @returns Array of HSL colors forming a palette\r\n */\r\nexport function generatePaletteFromSeed(\r\n  seedColor: HSLColor,\r\n  paletteSize: number = 5,\r\n  harmonyType: HarmonyType = 'analogous'\r\n): HSLColor[] {\r\n  // Use the appropriate harmony function based on the type\r\n  let baseColors: HSLColor[] = [];\r\n  const [h, s, l] = seedColor;\r\n  \r\n  switch (harmonyType) {\r\n    case 'complementary':\r\n      baseColors = [\r\n        seedColor, \r\n        [(h + 180) % 360, s, l]\r\n      ];\r\n      break;\r\n    case 'analogous':\r\n      baseColors = generateAnalogousColors(seedColor, Math.min(paletteSize, 5));\r\n      break;\r\n    case 'triadic':\r\n      baseColors = [\r\n        seedColor,\r\n        [(h + 120) % 360, s, l],\r\n        [(h + 240) % 360, s, l]\r\n      ];\r\n      break;\r\n    case 'tetradic':\r\n      baseColors = [\r\n        seedColor,\r\n        [(h + 90) % 360, s, l],\r\n        [(h + 180) % 360, s, l],\r\n        [(h + 270) % 360, s, l]\r\n      ];\r\n      break;\r\n    case 'splitComplementary':\r\n      baseColors = [\r\n        seedColor,\r\n        [(h + 150) % 360, s, l],\r\n        [(h + 210) % 360, s, l]\r\n      ];\r\n      break;\r\n    case 'monochromatic':\r\n      baseColors = generateMonochromaticColors(seedColor, paletteSize);\r\n      break;\r\n    default:\r\n      baseColors = [seedColor];\r\n  }\r\n  \r\n  // If we need more colors than the base harmony provides\r\n  if (paletteSize > baseColors.length) {\r\n    // Create variations by adjusting lightness\r\n    const additionalCount = paletteSize - baseColors.length;\r\n    const additionalColors = generateVariations(baseColors, additionalCount);\r\n    return [...baseColors, ...additionalColors];\r\n  }\r\n  \r\n  // If we need fewer colors, return just what we need\r\n  return baseColors.slice(0, paletteSize);\r\n}\r\n\r\n/**\r\n * Generate analogous colors (adjacent on the color wheel)\r\n */\r\nfunction generateAnalogousColors(seedColor: HSLColor, count: number): HSLColor[] {\r\n  const [h, s, l] = seedColor;\r\n  const colors: HSLColor[] = [seedColor];\r\n  const angle = 30; // Degree spacing\r\n  \r\n  // Half the colors will be on each side of the seed color\r\n  const sideCount = Math.floor((count - 1) / 2);\r\n  \r\n  // Generate colors on one side\r\n  for (let i = 1; i <= sideCount; i++) {\r\n    colors.push([(h + angle * i) % 360, s, l]);\r\n  }\r\n  \r\n  // Generate colors on the other side\r\n  for (let i = 1; i <= count - 1 - sideCount; i++) {\r\n    colors.unshift([(h - angle * i + 360) % 360, s, l]);\r\n  }\r\n  \r\n  return colors;\r\n}\r\n\r\n/**\r\n * Generate monochromatic colors (variations in lightness)\r\n */\r\nfunction generateMonochromaticColors(seedColor: HSLColor, count: number): HSLColor[] {\r\n  const [h, s] = seedColor;\r\n  const colors: HSLColor[] = [];\r\n  \r\n  // Create variations with different lightness levels\r\n  for (let i = 0; i < count; i++) {\r\n    // Distribute lightness from 20% to 80%\r\n    const lightness = 20 + (i / (count - 1)) * 60;\r\n    colors.push([h, s, lightness]);\r\n  }\r\n  \r\n  return colors;\r\n}\r\n\r\n/**\r\n * Generate additional color variations when needed\r\n */\r\nfunction generateVariations(baseColors: HSLColor[], count: number): HSLColor[] {\r\n  const variations: HSLColor[] = [];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    // Use baseColor as template, cycling through the available ones\r\n    const baseColor = baseColors[i % baseColors.length];\r\n    const [h, s, l] = baseColor;\r\n    \r\n    // Alternate between lighter and darker variations\r\n    const lightnessAdjustment = (i % 2 === 0) ? 15 : -15;\r\n    const newLightness = Math.max(10, Math.min(90, l + lightnessAdjustment));\r\n    \r\n    variations.push([h, s, newLightness]);\r\n  }\r\n  \r\n  return variations;\r\n}\r\n","import { createContext, useState, ReactNode, useCallback } from 'react';\r\nimport { Palette } from '../types/palette';\r\n\r\ninterface HistoryContextType {\r\n  history: Palette[];\r\n  currentIndex: number;\r\n  addToHistory: (palette: Palette) => void;\r\n  undo: () => Palette | null;\r\n  redo: () => Palette | null;\r\n  canUndo: boolean;\r\n  canRedo: boolean;\r\n}\r\n\r\nexport const HistoryContext = createContext<HistoryContextType>({\r\n  history: [],\r\n  currentIndex: -1,\r\n  addToHistory: () => {},\r\n  undo: () => null,\r\n  redo: () => null,\r\n  canUndo: false,\r\n  canRedo: false\r\n});\r\n\r\ninterface HistoryProviderProps {\r\n  children: ReactNode;\r\n  maxSize?: number;\r\n}\r\n\r\nexport const HistoryProvider = ({\r\n  children,\r\n  maxSize = 30\r\n}: HistoryProviderProps) => {\r\n  const [history, setHistory] = useState<Palette[]>([]);\r\n  const [currentIndex, setCurrentIndex] = useState<number>(-1);\r\n  \r\n  const addToHistory = useCallback((palette: Palette) => {\r\n    setHistory(prev => {\r\n      // Remove any future history if we're not at the end\r\n      const newHistory = prev.slice(0, currentIndex + 1);\r\n      \r\n      // Add the new palette\r\n      const updatedHistory = [...newHistory, { ...palette }];\r\n      \r\n      // Trim history if it exceeds max size\r\n      if (updatedHistory.length > maxSize) {\r\n        return updatedHistory.slice(updatedHistory.length - maxSize);\r\n      }\r\n      \r\n      return updatedHistory;\r\n    });\r\n    \r\n    setCurrentIndex(prev => Math.min(prev + 1, maxSize - 1));\r\n  }, [currentIndex, maxSize]);\r\n  \r\n  const undo = useCallback(() => {\r\n    if (currentIndex <= 0) {\r\n      return null;\r\n    }\r\n    \r\n    const newIndex = currentIndex - 1;\r\n    setCurrentIndex(newIndex);\r\n    return history[newIndex];\r\n  }, [currentIndex, history]);\r\n  \r\n  const redo = useCallback(() => {\r\n    if (currentIndex >= history.length - 1) {\r\n      return null;\r\n    }\r\n    \r\n    const newIndex = currentIndex + 1;\r\n    setCurrentIndex(newIndex);\r\n    return history[newIndex];\r\n  }, [currentIndex, history]);\r\n  \r\n  return (\r\n    <HistoryContext.Provider\r\n      value={{\r\n        history,\r\n        currentIndex,\r\n        addToHistory,\r\n        undo,\r\n        redo,\r\n        canUndo: currentIndex > 0,\r\n        canRedo: currentIndex < history.length - 1\r\n      }}\r\n    >\r\n      {children}\r\n    </HistoryContext.Provider>\r\n  );\r\n};\r\n","import { createContext, useState, ReactNode, useCallback, useContext } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { ColorWithId, HSLColor, HarmonyType, RGBColor } from '../types/color'\r\nimport { Palette, PaletteGenerationOptions, PaletteAdjustmentOptions } from '../types/palette'\r\nimport { UIColorRoleAssignments } from '../types/uiRoles'\r\nimport { generatePaletteFromSeed } from '../algorithms/generation/seedBased'\r\nimport { generatePaletteFromSemantics } from '../algorithms/generation/semantic'\r\nimport { hslToRGB, rgbToHSL } from '../algorithms/colorModels/conversions'\r\nimport { rgbToHex } from '../algorithms/colorModels/rgb'\r\nimport { rgbToLAB } from '../algorithms/colorModels/conversions'\r\nimport { HistoryContext } from './HistoryContext'\r\n\r\ninterface PaletteContextType {\r\n  currentPalette: Palette\r\n  generateNewPalette: (options: PaletteGenerationOptions) => void\r\n  regeneratePalette: (options: Partial<PaletteGenerationOptions>) => void\r\n  updateColor: (colorId: string, color: Partial<ColorWithId>) => void\r\n  lockColor: (colorId: string, locked: boolean) => void\r\n  updateRoleAssignments: (assignments: UIColorRoleAssignments) => void\r\n  roleAssignments: UIColorRoleAssignments\r\n  reorderColors: (startIndex: number, endIndex: number) => void\r\n  // Add missing methods\r\n  updatePalette: (palette: Palette) => void\r\n  setCurrentPalette: (palette: Palette) => void\r\n}\r\n\r\nexport const PaletteContext = createContext<PaletteContextType>({\r\n  currentPalette: {\r\n    id: '',\r\n    name: '',\r\n    colors: [],\r\n    harmony: 'analogous',\r\n    timestamp: 0\r\n  },\r\n  generateNewPalette: () => {},\r\n  regeneratePalette: () => {},\r\n  updateColor: () => {},\r\n  lockColor: () => {},\r\n  updateRoleAssignments: () => {},\r\n  roleAssignments: {},\r\n  reorderColors: () => {},\r\n  updatePalette: () => {},\r\n  setCurrentPalette: () => {}\r\n})\r\n\r\ninterface PaletteProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const PaletteProvider = ({ children }: PaletteProviderProps) => {\r\n  const { addToHistory } = useContext(HistoryContext)\r\n  \r\n  const [currentPalette, setCurrentPalette] = useState<Palette>({\r\n    id: uuidv4(),\r\n    name: 'New Palette',\r\n    colors: [],\r\n    harmony: 'analogous',\r\n    timestamp: Date.now()\r\n  })\r\n  \r\n  const [roleAssignments, setRoleAssignments] = useState<UIColorRoleAssignments>({})\r\n  \r\n  const createColorWithId = (hsl: HSLColor): ColorWithId => {\r\n    const rgb = hslToRGB(hsl)\r\n    return {\r\n      id: uuidv4(),\r\n      rgb,\r\n      hex: rgbToHex(rgb),\r\n      hsl,\r\n      lab: rgbToLAB(rgb),\r\n      locked: false\r\n    }\r\n  }\r\n  \r\n  const generateNewPalette = (options: PaletteGenerationOptions) => {\r\n    const { paletteSize, harmonyType, preserveLocked } = options;\r\n    \r\n    // Get currently locked colors if we need to preserve them\r\n    const lockedColors = preserveLocked ? currentPalette.colors.filter(color => color.locked) : [];\r\n    \r\n    // Generate a random seed color if none provided\r\n    const seedColor = options.seedColor || [Math.floor(Math.random() * 360), 70, 50];\r\n    \r\n    // Generate HSL colors\r\n    const hslColors = generatePaletteFromSeed(seedColor, paletteSize, harmonyType);\r\n    \r\n    // Convert to ColorWithId objects, but preserve locked colors\r\n    let colors: ColorWithId[] = [];\r\n    \r\n    if (preserveLocked && lockedColors.length > 0) {\r\n      // Create a new array with locked colors first\r\n      colors = [...lockedColors];\r\n      \r\n      // Fill the remaining slots with new colors\r\n      const remainingSlots = paletteSize - lockedColors.length;\r\n      \r\n      if (remainingSlots > 0) {\r\n        // Take only the colors we need from the generated ones\r\n        const newColors = hslColors.slice(0, remainingSlots).map(createColorWithId);\r\n        colors = [...colors, ...newColors];\r\n      }\r\n    } else {\r\n      // No locked colors or not preserving locks - use all new colors\r\n      colors = hslColors.map(createColorWithId);\r\n    }\r\n    \r\n    // Create new palette\r\n    const newPalette: Palette = {\r\n      id: uuidv4(),\r\n      name: 'New Palette',\r\n      colors,\r\n      harmony: harmonyType,\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    setCurrentPalette(newPalette);\r\n    \r\n    // Clear role assignments when generating a completely new palette\r\n    if (!preserveLocked || lockedColors.length === 0) {\r\n      setRoleAssignments({});\r\n    }\r\n  };\r\n  \r\n  const regeneratePalette = (options: Partial<PaletteGenerationOptions>) => {\r\n    const { harmonyType, preserveLocked = true } = options;\r\n    \r\n    if (currentPalette.colors.length === 0) {\r\n      generateNewPalette({\r\n        paletteSize: 5,\r\n        harmonyType: harmonyType || 'analogous',\r\n        preserveLocked: false,\r\n        mode: 'light'\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Get locked colors\r\n    const lockedColors = preserveLocked ? \r\n      currentPalette.colors.filter(color => color.locked) : [];\r\n    \r\n    // Find an unlocked color to use as seed\r\n    let seedColor: HSLColor;\r\n    const unlockedColor = currentPalette.colors.find(c => !c.locked);\r\n    \r\n    if (unlockedColor) {\r\n      seedColor = unlockedColor.hsl;\r\n    } else if (currentPalette.colors.length > 0) {\r\n      seedColor = currentPalette.colors[0].hsl;\r\n    } else {\r\n      seedColor = [Math.floor(Math.random() * 360), 70, 50];\r\n    }\r\n    \r\n    // Generate new HSL colors\r\n    const newHarmony = harmonyType || currentPalette.harmony;\r\n    const hslColors = generatePaletteFromSeed(\r\n      seedColor, \r\n      currentPalette.colors.length, \r\n      newHarmony\r\n    );\r\n    \r\n    // Create new colors array preserving locked colors\r\n    let newColors: ColorWithId[] = [];\r\n    \r\n    if (preserveLocked && lockedColors.length > 0) {\r\n      // Start with locked colors\r\n      newColors = [...lockedColors];\r\n      \r\n      // Generate colors for remaining slots\r\n      const remainingCount = currentPalette.colors.length - lockedColors.length;\r\n      if (remainingCount > 0) {\r\n        const additionalColors = hslColors.slice(0, remainingCount).map(createColorWithId);\r\n        newColors = [...newColors, ...additionalColors];\r\n      }\r\n    } else {\r\n      // No locked colors to preserve\r\n      newColors = hslColors.map(createColorWithId);\r\n    }\r\n    \r\n    // Update palette\r\n    setCurrentPalette({\r\n      ...currentPalette,\r\n      colors: newColors,\r\n      harmony: newHarmony,\r\n      timestamp: Date.now()\r\n    });\r\n  };\r\n  \r\n  const updateColor = useCallback((colorId: string, updates: Partial<ColorWithId>) => {\r\n    setCurrentPalette(prev => {\r\n      const updatedColors = prev.colors.map(color => {\r\n        if (color.id === colorId) {\r\n          return { ...color, ...updates }\r\n        }\r\n        return color\r\n      })\r\n      \r\n      return {\r\n        ...prev,\r\n        colors: updatedColors,\r\n        timestamp: Date.now()\r\n      }\r\n    })\r\n  }, [])\r\n  \r\n  const lockColor = (colorId: string, locked: boolean) => {\r\n    // Update the current palette with the locked/unlocked color\r\n    setCurrentPalette(prev => {\r\n      const updatedColors = prev.colors.map(color => {\r\n        if (color.id === colorId) {\r\n          return { ...color, locked };\r\n        }\r\n        return color;\r\n      });\r\n      \r\n      return {\r\n        ...prev,\r\n        colors: updatedColors,\r\n        timestamp: Date.now()\r\n      };\r\n    });\r\n  };\r\n  \r\n  const updateRoleAssignments = useCallback((assignments: UIColorRoleAssignments) => {\r\n    setRoleAssignments(assignments)\r\n  }, [])\r\n  \r\n  const reorderColors = useCallback((startIndex: number, endIndex: number) => {\r\n    setCurrentPalette(prev => {\r\n      const result = [...prev.colors]\r\n      const [removed] = result.splice(startIndex, 1)\r\n      result.splice(endIndex, 0, removed)\r\n      \r\n      return {\r\n        ...prev,\r\n        colors: result,\r\n        timestamp: Date.now()\r\n      }\r\n    })\r\n  }, [])\r\n  \r\n  const updatePalette = useCallback((palette: Palette) => {\r\n    setCurrentPalette(palette)\r\n  }, [])\r\n\r\n  return (\r\n    <PaletteContext.Provider \r\n      value={{\r\n        currentPalette,\r\n        generateNewPalette,\r\n        regeneratePalette,\r\n        updateColor,\r\n        lockColor,\r\n        updateRoleAssignments,\r\n        roleAssignments,\r\n        reorderColors,\r\n        updatePalette,\r\n        setCurrentPalette\r\n      }}\r\n    >\r\n      {children}\r\n    </PaletteContext.Provider>\r\n  )\r\n}\r\n","import { createContext, useState, ReactNode, useEffect } from 'react';\r\n\r\ninterface Settings {\r\n  paletteSize: number;\r\n  mode: 'light' | 'dark' | 'both';\r\n  showTooltips: boolean;\r\n  autoApplyRoles: boolean;\r\n  enforceAccessibility: boolean;\r\n  accessibilityLevel: 'AA' | 'AAA';\r\n}\r\n\r\ninterface SettingsContextType {\r\n  settings: Settings;\r\n  updateSettings: (newSettings: Partial<Settings>) => void;\r\n  resetSettings: () => void;\r\n}\r\n\r\nconst DEFAULT_SETTINGS: Settings = {\r\n  paletteSize: 5,\r\n  mode: 'light',\r\n  showTooltips: true,\r\n  autoApplyRoles: true,\r\n  enforceAccessibility: true,\r\n  accessibilityLevel: 'AA'\r\n};\r\n\r\nexport const SettingsContext = createContext<SettingsContextType>({\r\n  settings: DEFAULT_SETTINGS,\r\n  updateSettings: () => {},\r\n  resetSettings: () => {}\r\n});\r\n\r\ninterface SettingsProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const SettingsProvider = ({ children }: SettingsProviderProps) => {\r\n  const [settings, setSettings] = useState<Settings>(() => {\r\n    const savedSettings = localStorage.getItem('colorGeneratorSettings');\r\n    return savedSettings ? JSON.parse(savedSettings) : DEFAULT_SETTINGS;\r\n  });\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem('colorGeneratorSettings', JSON.stringify(settings));\r\n  }, [settings]);\r\n  \r\n  const updateSettings = (newSettings: Partial<Settings>) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      ...newSettings\r\n    }));\r\n  };\r\n  \r\n  const resetSettings = () => {\r\n    setSettings(DEFAULT_SETTINGS);\r\n  };\r\n  \r\n  return (\r\n    <SettingsContext.Provider\r\n      value={{\r\n        settings,\r\n        updateSettings,\r\n        resetSettings\r\n      }}\r\n    >\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport './Header.css';\r\n\r\ninterface HeaderProps {\r\n  toggleSidebar?: () => void;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ toggleSidebar }) => {\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <header className=\"app-header\">\r\n      <div className=\"header-left\">\r\n        <button \r\n          className=\"sidebar-toggle\" \r\n          onClick={toggleSidebar}\r\n          aria-label=\"Toggle navigation sidebar\"\r\n        >\r\n          ☰\r\n        </button>\r\n        <h1 className=\"app-title\">Ultimate Color Generator</h1>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        <button \r\n          className=\"theme-toggle\" \r\n          onClick={toggleTheme}\r\n          aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}\r\n        >\r\n          {theme === 'light' ? '🌙' : '☀️'}\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Sidebar.css';\r\n\r\ninterface SidebarProps {\r\n  collapsed?: boolean;\r\n}\r\n\r\nconst Sidebar: React.FC<SidebarProps> = ({ collapsed = false }) => {\r\n  const navItems = [\r\n    { path: '/', label: 'Generate', icon: '🎨' },\r\n    { path: '/preview', label: 'Preview', icon: '👁️' },\r\n  ];\r\n  \r\n  return (\r\n    <nav className={`sidebar ${collapsed ? 'collapsed' : ''}`}>\r\n      <ul className=\"nav-list\">\r\n        {navItems.map(item => (\r\n          <li key={item.path} className=\"nav-item\">\r\n            <NavLink \r\n              to={item.path}\r\n              className={({ isActive }) => isActive ? 'active' : ''}\r\n            >\r\n              <span className=\"nav-icon\">{item.icon}</span>\r\n              {!collapsed && <span className=\"nav-label\">{item.label}</span>}\r\n            </NavLink>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { useContext } from 'react'\r\nimport { PaletteContext } from '../context/PaletteContext'\r\nimport { HistoryContext } from '../context/HistoryContext'\r\nimport { SettingsContext } from '../context/SettingsContext'\r\nimport { PaletteGenerationOptions, PaletteAdjustmentOptions } from '../types/palette'\r\nimport { ColorWithId, HSLColor } from '../types/color'\r\nimport { hslToRGB, rgbToHSL } from '../algorithms/colorModels/conversions'\r\nimport { rgbToHex } from '../algorithms/colorModels/rgb'\r\nimport { rgbToLAB } from '../algorithms/colorModels/conversions'\r\n\r\nexport function usePalette() {\r\n  const paletteContext = useContext(PaletteContext)\r\n  const historyContext = useContext(HistoryContext)\r\n  const { settings } = useContext(SettingsContext)\r\n  \r\n  const generatePalette = (options?: Partial<PaletteGenerationOptions>) => {\r\n    const defaultOptions: PaletteGenerationOptions = {\r\n      paletteSize: settings.paletteSize,\r\n      harmonyType: 'analogous',\r\n      preserveLocked: true,\r\n      mode: settings.mode\r\n    }\r\n    \r\n    paletteContext.generateNewPalette({\r\n      ...defaultOptions,\r\n      ...options\r\n    })\r\n  }\r\n  \r\n  const adjustPalette = (options: PaletteAdjustmentOptions) => {\r\n    // Create a copy of the current colors to modify\r\n    const adjustedColors = paletteContext.currentPalette.colors.map((color, index) => {\r\n      // Skip locked colors if preserveLocked is true\r\n      if (options.preserveLocked && color.locked) {\r\n        return color\r\n      }\r\n      \r\n      const [h, s, l] = color.hsl\r\n      let newH = h\r\n      let newS = s\r\n      let newL = l\r\n      \r\n      // Apply hue shift if provided\r\n      if (options.hueShift !== undefined) {\r\n        newH = (h + options.hueShift) % 360\r\n        if (newH < 0) newH += 360\r\n      }\r\n      \r\n      // Apply saturation multiplier if provided\r\n      if (options.saturationMultiplier !== undefined) {\r\n        newS = Math.max(0, Math.min(100, s * options.saturationMultiplier))\r\n      }\r\n      \r\n      // Apply lightness multiplier if provided\r\n      if (options.lightnessMultiplier !== undefined) {\r\n        newL = Math.max(0, Math.min(100, l * options.lightnessMultiplier))\r\n      }\r\n      \r\n      // Only update if something changed\r\n      if (newH !== h || newS !== s || newL !== l) {\r\n        const newHSL: HSLColor = [newH, newS, newL]\r\n        const newRGB = hslToRGB(newHSL)\r\n        \r\n        return {\r\n          ...color,\r\n          rgb: newRGB,\r\n          hex: rgbToHex(newRGB),\r\n          hsl: newHSL,\r\n          lab: rgbToLAB(newRGB)\r\n        }\r\n      }\r\n      \r\n      return color\r\n    })\r\n    \r\n    // Add current palette to history\r\n    historyContext.addToHistory(paletteContext.currentPalette)\r\n    \r\n    // Update the palette with adjusted colors\r\n    // Using regeneratePalette instead of updatePalette\r\n    const newPalette = {\r\n      ...paletteContext.currentPalette,\r\n      colors: adjustedColors,\r\n      timestamp: Date.now()\r\n    }\r\n    paletteContext.regeneratePalette({\r\n      preserveLocked: options.preserveLocked\r\n    })\r\n  }\r\n  \r\n  const undo = () => {\r\n    const previousPalette = historyContext.undo()\r\n    if (previousPalette) {\r\n      // Use regeneratePalette instead of setCurrentPalette\r\n      paletteContext.regeneratePalette({\r\n        // Adding required options\r\n        harmonyType: previousPalette.harmony,\r\n        preserveLocked: true\r\n      })\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  \r\n  const redo = () => {\r\n    const nextPalette = historyContext.redo()\r\n    if (nextPalette) {\r\n      // Use regeneratePalette instead of setCurrentPalette\r\n      paletteContext.regeneratePalette({\r\n        // Adding required options\r\n        harmonyType: nextPalette.harmony,\r\n        preserveLocked: true\r\n      })\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const lockColor = (colorId: string, locked: boolean) => {\r\n    console.log(`usePalette.lockColor called with colorId: ${colorId}, locked: ${locked}`);\r\n    \r\n    // First, check if the lockColor function exists in the context\r\n    if (!paletteContext.lockColor) {\r\n      console.error(\"lockColor function is missing in PaletteContext!\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Call the context method\r\n      paletteContext.lockColor(colorId, locked);\r\n      \r\n      // For debugging - log the updated state\r\n      setTimeout(() => {\r\n        const updatedColor = paletteContext.currentPalette.colors.find(c => c.id === colorId);\r\n        console.log(`Updated color state: ${updatedColor?.locked}`);\r\n      }, 0);\r\n    } catch (error) {\r\n      console.error(\"Error in lockColor function:\", error);\r\n    }\r\n  };\r\n  \r\n  return {\r\n    ...paletteContext,\r\n    generatePalette,\r\n    adjustPalette,\r\n    undo,\r\n    redo,\r\n    canUndo: historyContext.canUndo,\r\n    canRedo: historyContext.canRedo,\r\n    lockColor\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { usePalette } from '../../../hooks/usePalette';\r\nimport { ColorWithId } from '../../../types/color';\r\nimport './Swatch.css';\r\n\r\ninterface SwatchProps {\r\n  color: ColorWithId;\r\n  size: 'small' | 'medium' | 'large';\r\n}\r\n\r\nconst Swatch: React.FC<SwatchProps> = ({ color, size }) => {\r\n  const { lockColor } = usePalette();\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  // Calculate whether text should be light or dark based on the color's lightness\r\n  const isDark = color.hsl[2] < 50;\r\n  const textColor = isDark ? 'white' : 'black';\r\n  \r\n  // Calculate pill background and text colors for better readability\r\n  const pillBgColor = isDark ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)';\r\n  // Set pill text color based on the pill background color - not the swatch color\r\n  const pillTextColor = isDark ? 'white' : 'black';\r\n  \r\n  // For dark pill backgrounds, always use white text\r\n  const isPillBgDark = !isDark; // If swatch is light, pill bg will be dark\r\n  const finalPillTextColor = isPillBgDark ? 'white' : 'black';\r\n\r\n  // Handle copying hex value to clipboard\r\n  const handleCopyHex = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    navigator.clipboard.writeText(color.hex);\r\n    setCopied(true);\r\n    setTimeout(() => setCopied(false), 1500);\r\n  };\r\n\r\n  // Handle toggling lock state\r\n  const handleToggleLock = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    lockColor(color.id, !color.locked);\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={`color-swatch ${size} ${color.locked ? 'locked' : ''}`} \r\n      style={{ \r\n        backgroundColor: color.hex,\r\n        borderRadius: 0 // Explicitly set inline style as well\r\n      }}\r\n    >\r\n      <div className=\"swatch-toolbar\">\r\n        <button \r\n          className=\"lock-button\"\r\n          onMouseDown={handleToggleLock} \r\n          aria-label={color.locked ? \"Unlock color\" : \"Lock color\"}\r\n          title={color.locked ? \"Unlock color\" : \"Lock color\"}\r\n        >\r\n          {color.locked ? '🔒' : '🔓'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"swatch-details\">\r\n        <span \r\n          className=\"color-pill hex-value\" \r\n          style={{ backgroundColor: pillBgColor, color: finalPillTextColor }}\r\n          onClick={handleCopyHex}\r\n          title=\"Click to copy\"\r\n        >\r\n          {copied ? \"Copied!\" : color.hex}\r\n        </span>\r\n        \r\n        <span \r\n          className=\"color-pill rgb-values\"\r\n          style={{ backgroundColor: pillBgColor, color: finalPillTextColor }}\r\n        >\r\n          RGB: {color.rgb[0]}, {color.rgb[1]}, {color.rgb[2]}\r\n        </span>\r\n        \r\n        <span \r\n          className=\"color-pill hsl-values\"\r\n          style={{ backgroundColor: pillBgColor, color: finalPillTextColor }}\r\n        >\r\n          HSL: {Math.round(color.hsl[0])}°, {Math.round(color.hsl[1])}%, {Math.round(color.hsl[2])}%\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Swatch;\r\n","import React from 'react';\r\nimport { usePalette } from '../../../hooks/usePalette';\r\nimport Swatch from './Swatch';\r\nimport './SwatchGrid.css';\r\n\r\nconst SwatchGrid: React.FC = () => {\r\n  const { currentPalette } = usePalette();\r\n  const colors = currentPalette.colors;\r\n\r\n  // Show empty state if no colors\r\n  if (colors.length === 0) {\r\n    return (\r\n      <div className=\"empty-state\">\r\n        <p>No palette generated yet</p>\r\n        <p>Use the controls above to generate a palette</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Determine grid class based on number of colors\r\n  let gridClassName = \"swatch-grid\";\r\n  if (colors.length === 1) {\r\n    gridClassName += \" one-color\";\r\n  } else if (colors.length === 2) {\r\n    gridClassName += \" two-colors\";\r\n  } else if (colors.length >= 3) {\r\n    gridClassName += \" has-proportion\"; // Apply 60-30-10 proportions\r\n  }\r\n\r\n  return (\r\n    <div className={gridClassName}>\r\n      {colors.map((color, index) => (\r\n        <Swatch\r\n          key={color.id}\r\n          color={color}\r\n          size={index === 0 ? 'large' : index === 1 ? 'medium' : 'small'}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwatchGrid;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { usePalette } from '../../../hooks/usePalette';\r\nimport { HarmonyType } from '../../../types/color';\r\nimport './SeedPicker.css';\r\n\r\ninterface SeedPickerProps {\r\n  onClose: () => void;\r\n}\r\n\r\nconst SeedPicker: React.FC<SeedPickerProps> = ({ onClose }) => {\r\n  const { generatePalette, currentPalette } = usePalette();\r\n  const [hexValue, setHexValue] = useState('#1a73e8'); // Default Google blue\r\n  const [hue, setHue] = useState(210); // Default hue in degrees\r\n  const [saturation, setSaturation] = useState(80); // Default saturation percent\r\n  const [lightness, setLightness] = useState(50); // Default lightness percent\r\n  const [harmonyType, setHarmonyType] = useState<HarmonyType>('analogous');\r\n  \r\n  // Convert hex to HSL on initialization\r\n  useEffect(() => {\r\n    try {\r\n      // Parse hex to get RGB\r\n      const hexColor = hexValue.replace('#', '');\r\n      const r = parseInt(hexColor.substr(0, 2), 16) / 255;\r\n      const g = parseInt(hexColor.substr(2, 2), 16) / 255;\r\n      const b = parseInt(hexColor.substr(4, 2), 16) / 255;\r\n      \r\n      // Convert RGB to HSL (simplified for this example)\r\n      const max = Math.max(r, g, b);\r\n      const min = Math.min(r, g, b);\r\n      const d = max - min;\r\n      \r\n      // Calculate Hue\r\n      let h = 0;\r\n      if (d === 0) h = 0;\r\n      else if (max === r) h = ((g - b) / d) % 6;\r\n      else if (max === g) h = (b - r) / d + 2;\r\n      else if (max === b) h = (r - g) / d + 4;\r\n      h = Math.round(h * 60);\r\n      if (h < 0) h += 360;\r\n      \r\n      // Calculate Lightness\r\n      const l = (max + min) / 2;\r\n      \r\n      // Calculate Saturation\r\n      const s = d === 0 ? 0 : d / (1 - Math.abs(2 * l - 1));\r\n      \r\n      setHue(h);\r\n      setSaturation(Math.round(s * 100));\r\n      setLightness(Math.round(l * 100));\r\n    } catch (error) {\r\n      console.error(\"Error parsing hex color\", error);\r\n    }\r\n  }, []);\r\n  \r\n  // Update hex when HSL changes\r\n  useEffect(() => {\r\n    // Function to convert HSL to Hex\r\n    const hslToHex = (h: number, s: number, l: number): string => {\r\n      s /= 100;\r\n      l /= 100;\r\n      \r\n      const c = (1 - Math.abs(2 * l - 1)) * s;\r\n      const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n      const m = l - c / 2;\r\n      \r\n      let r = 0, g = 0, b = 0;\r\n      \r\n      if (0 <= h && h < 60) {\r\n        r = c; g = x; b = 0;\r\n      } else if (60 <= h && h < 120) {\r\n        r = x; g = c; b = 0;\r\n      } else if (120 <= h && h < 180) {\r\n        r = 0; g = c; b = x;\r\n      } else if (180 <= h && h < 240) {\r\n        r = 0; g = x; b = c;\r\n      } else if (240 <= h && h < 300) {\r\n        r = x; g = 0; b = c;\r\n      } else if (300 <= h && h < 360) {\r\n        r = c; g = 0; b = x;\r\n      }\r\n      \r\n      // Convert to hex\r\n      const toHex = (value: number): string => {\r\n        const hex = Math.round((value + m) * 255).toString(16);\r\n        return hex.length === 1 ? '0' + hex : hex;\r\n      };\r\n      \r\n      return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n    };\r\n    \r\n    setHexValue(hslToHex(hue, saturation, lightness));\r\n  }, [hue, saturation, lightness]);\r\n  \r\n  // Handle hex input change\r\n  const handleHexChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    \r\n    // Only update if it's a valid hex\r\n    if (/^#[0-9A-Fa-f]{6}$/.test(value)) {\r\n      setHexValue(value);\r\n      \r\n      // Update HSL values (this would trigger the useEffect above)\r\n      try {\r\n        // Parse hex to get RGB\r\n        const hexColor = value.replace('#', '');\r\n        const r = parseInt(hexColor.substr(0, 2), 16) / 255;\r\n        const g = parseInt(hexColor.substr(2, 2), 16) / 255;\r\n        const b = parseInt(hexColor.substr(4, 2), 16) / 255;\r\n        \r\n        // Convert RGB to HSL\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        const d = max - min;\r\n        \r\n        // Calculate Hue\r\n        let h = 0;\r\n        if (d === 0) h = 0;\r\n        else if (max === r) h = ((g - b) / d) % 6;\r\n        else if (max === g) h = (b - r) / d + 2;\r\n        else if (max === b) h = (r - g) / d + 4;\r\n        h = Math.round(h * 60);\r\n        if (h < 0) h += 360;\r\n        \r\n        // Calculate Lightness\r\n        const l = (max + min) / 2;\r\n        \r\n        // Calculate Saturation\r\n        const s = d === 0 ? 0 : d / (1 - Math.abs(2 * l - 1));\r\n        \r\n        setHue(h);\r\n        setSaturation(Math.round(s * 100));\r\n        setLightness(Math.round(l * 100));\r\n      } catch (error) {\r\n        console.error(\"Error parsing hex color\", error);\r\n      }\r\n    } else {\r\n      // Update the input anyway to give feedback\r\n      setHexValue(value);\r\n    }\r\n  };\r\n  \r\n  // Handle HSL sliders\r\n  const handleHueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setHue(parseInt(e.target.value));\r\n  };\r\n  \r\n  const handleSaturationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSaturation(parseInt(e.target.value));\r\n  };\r\n  \r\n  const handleLightnessChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setLightness(parseInt(e.target.value));\r\n  };\r\n  \r\n  // Handle harmony type selection\r\n  const handleHarmonyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setHarmonyType(e.target.value as HarmonyType);\r\n  };\r\n  \r\n  // Handle generate button click\r\n  const handleGenerate = () => {\r\n    generatePalette({\r\n      seedColor: [hue, saturation, lightness],\r\n      harmonyType: harmonyType,\r\n      preserveLocked: true,\r\n      mode: 'light'\r\n    });\r\n    \r\n    onClose(); // Close the drawer after generating\r\n  };\r\n  \r\n  return (\r\n    <div className=\"seed-picker\">\r\n      <div \r\n        className=\"color-preview\" \r\n        style={{ backgroundColor: hexValue }}\r\n      >\r\n        <div className=\"hex-input-container\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"hex-input\"\r\n            value={hexValue}\r\n            onChange={handleHexChange}\r\n            maxLength={7}\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"hsl-sliders\">\r\n        <div className=\"slider-group\">\r\n          <label>\r\n            Hue: {hue}°\r\n            <input\r\n              type=\"range\"\r\n              className=\"hue-slider\"\r\n              min=\"0\"\r\n              max=\"360\"\r\n              value={hue}\r\n              onChange={handleHueChange}\r\n            />\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"slider-group\">\r\n          <label>\r\n            Saturation: {saturation}%\r\n            <input\r\n              type=\"range\"\r\n              className=\"saturation-slider\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={saturation}\r\n              onChange={handleSaturationChange}\r\n              style={{\r\n                background: `linear-gradient(to right, \r\n                  hsl(${hue}, 0%, ${lightness}%), \r\n                  hsl(${hue}, 100%, ${lightness}%))`\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"slider-group\">\r\n          <label>\r\n            Lightness: {lightness}%\r\n            <input\r\n              type=\"range\"\r\n              className=\"lightness-slider\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={lightness}\r\n              onChange={handleLightnessChange}\r\n              style={{\r\n                background: `linear-gradient(to right, \r\n                  hsl(${hue}, ${saturation}%, 0%), \r\n                  hsl(${hue}, ${saturation}%, 50%), \r\n                  hsl(${hue}, ${saturation}%, 100%))`\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"harmony-selection\">\r\n        <label htmlFor=\"harmony-select\">Harmony Type:</label>\r\n        <select \r\n          id=\"harmony-select\"\r\n          value={harmonyType}\r\n          onChange={handleHarmonyChange}\r\n        >\r\n          <option value=\"analogous\">Analogous</option>\r\n          <option value=\"complementary\">Complementary</option>\r\n          <option value=\"triadic\">Triadic</option>\r\n          <option value=\"tetradic\">Tetradic</option>\r\n          <option value=\"splitComplementary\">Split Complementary</option>\r\n          <option value=\"monochromatic\">Monochromatic</option>\r\n        </select>\r\n      </div>\r\n      \r\n      <button \r\n        className=\"generate-button\"\r\n        onClick={handleGenerate}\r\n      >\r\n        Generate Palette\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeedPicker;\r\n","import { HSLColor, HarmonyType, SemanticMapping } from '../../types/color';\r\nimport { generatePaletteFromSeed } from './seedBased';\r\n\r\n/**\r\n * Semantic mappings from descriptive terms to color attributes\r\n */\r\nexport const SEMANTIC_MAPPINGS: Record<string, SemanticMapping> = {\r\n  // Mood/tone mappings\r\n  'calm': {\r\n    hueRange: [180, 240], // Cyan to blue\r\n    saturationRange: [30, 60],\r\n    lightnessRange: [50, 70]\r\n  },\r\n  'energetic': {\r\n    hueRange: [0, 60], // Red to yellow\r\n    saturationRange: [80, 100],\r\n    lightnessRange: [50, 65]\r\n  },\r\n  'professional': {\r\n    hueRange: [200, 240], // Blue range\r\n    saturationRange: [30, 70],\r\n    lightnessRange: [40, 60]\r\n  },\r\n  // Style mappings\r\n  'vintage': {\r\n    hueRange: [20, 40], // Browns/oranges\r\n    saturationRange: [20, 50],\r\n    lightnessRange: [40, 60]\r\n  },\r\n  'minimalist': {\r\n    hueRange: [0, 360], // Any hue\r\n    saturationRange: [0, 30],\r\n    lightnessRange: [40, 95]\r\n  },\r\n  // Feel mappings\r\n  'warm': {\r\n    hueRange: [0, 60], // Red to yellow\r\n    saturationRange: [50, 100],\r\n    lightnessRange: [40, 70]\r\n  },\r\n  'cool': {\r\n    hueRange: [180, 270], // Cyan to purple\r\n    saturationRange: [40, 80],\r\n    lightnessRange: [40, 70]\r\n  },\r\n  'vibrant': {\r\n    hueRange: [0, 360], // Any hue\r\n    saturationRange: [80, 100],\r\n    lightnessRange: [45, 65]\r\n  },\r\n  'muted': {\r\n    hueRange: [0, 360], // Any hue\r\n    saturationRange: [20, 50],\r\n    lightnessRange: [40, 70]\r\n  },\r\n  'dark': {\r\n    hueRange: [0, 360], // Any hue\r\n    saturationRange: [40, 80],\r\n    lightnessRange: [15, 35]\r\n  },\r\n  'light': {\r\n    hueRange: [0, 360], // Any hue\r\n    saturationRange: [20, 60],\r\n    lightnessRange: [70, 95]\r\n  },\r\n  'earthy': {\r\n    hueRange: [20, 150], // Browns, greens\r\n    saturationRange: [20, 60],\r\n    lightnessRange: [30, 60]\r\n  },\r\n  'sophisticated': {\r\n    hueRange: [270, 330], // Purples\r\n    saturationRange: [30, 50],\r\n    lightnessRange: [20, 50]\r\n  }\r\n};\r\n\r\n/**\r\n * Mapping from semantic terms to harmony types\r\n */\r\nconst HARMONY_MAPPINGS: Record<string, HarmonyType> = {\r\n  'energetic': 'complementary',\r\n  'vibrant': 'triadic',\r\n  'balanced': 'tetradic',\r\n  'calm': 'analogous',\r\n  'minimalist': 'monochromatic',\r\n  'sophisticated': 'splitComplementary'\r\n};\r\n\r\n/**\r\n * Generates a palette based on semantic terms\r\n * \r\n * @param semanticTerms - Array of semantic descriptors\r\n * @param paletteSize - Number of colors to generate\r\n * @returns Array of HSL colors\r\n */\r\nexport function generatePaletteFromSemantics(\r\n  semanticTerms: string[],\r\n  paletteSize: number\r\n): HSLColor[] {\r\n  // Combine the semantic mappings for all provided terms\r\n  const combinedMapping = combineSemanticMappings(semanticTerms);\r\n  \r\n  // Generate a seed color from the combined mapping\r\n  const seedColor = generateColorFromMapping(combinedMapping);\r\n  \r\n  // Choose a harmony type based on semantic terms\r\n  const harmonyType = determineHarmonyFromSemantics(semanticTerms);\r\n  \r\n  // Generate palette using the seed-based algorithm\r\n  return generatePaletteFromSeed(seedColor, paletteSize, harmonyType);\r\n}\r\n\r\n/**\r\n * Combines multiple semantic mappings into one\r\n * \r\n * @param semanticTerms - Array of semantic descriptor strings\r\n * @returns A single combined semantic mapping\r\n */\r\nfunction combineSemanticMappings(semanticTerms: string[]): SemanticMapping {\r\n  // Default mapping if no valid terms are provided\r\n  if (!semanticTerms.length) {\r\n    return {\r\n      hueRange: [0, 360],\r\n      saturationRange: [50, 100],\r\n      lightnessRange: [40, 60]\r\n    };\r\n  }\r\n  \r\n  let combinedMapping: SemanticMapping = {\r\n    hueRange: [0, 360],\r\n    saturationRange: [0, 100],\r\n    lightnessRange: [0, 100]\r\n  };\r\n  \r\n  // Find intersection of ranges for all valid terms\r\n  let validTermCount = 0;\r\n  \r\n  semanticTerms.forEach(term => {\r\n    if (SEMANTIC_MAPPINGS[term]) {\r\n      validTermCount++;\r\n      \r\n      // If it's our first valid term, just use its mapping\r\n      if (validTermCount === 1) {\r\n        combinedMapping = { ...SEMANTIC_MAPPINGS[term] };\r\n        return;\r\n      }\r\n      \r\n      // Otherwise, find intersection with current mapping\r\n      const mapping = SEMANTIC_MAPPINGS[term];\r\n      \r\n      // For hue, we handle it specially due to the circular nature\r\n      if (isHueRangeNarrower(mapping.hueRange, combinedMapping.hueRange)) {\r\n        combinedMapping.hueRange = mapping.hueRange;\r\n      }\r\n      \r\n      // For saturation and lightness, find the intersection\r\n      combinedMapping.saturationRange = [\r\n        Math.max(combinedMapping.saturationRange[0], mapping.saturationRange[0]),\r\n        Math.min(combinedMapping.saturationRange[1], mapping.saturationRange[1])\r\n      ];\r\n      \r\n      combinedMapping.lightnessRange = [\r\n        Math.max(combinedMapping.lightnessRange[0], mapping.lightnessRange[0]),\r\n        Math.min(combinedMapping.lightnessRange[1], mapping.lightnessRange[1])\r\n      ];\r\n    }\r\n  });\r\n  \r\n  // Ensure the ranges are valid (min <= max)\r\n  if (combinedMapping.saturationRange[0] > combinedMapping.saturationRange[1]) {\r\n    combinedMapping.saturationRange = [50, 70]; // Default fallback\r\n  }\r\n  \r\n  if (combinedMapping.lightnessRange[0] > combinedMapping.lightnessRange[1]) {\r\n    combinedMapping.lightnessRange = [40, 60]; // Default fallback\r\n  }\r\n  \r\n  return combinedMapping;\r\n}\r\n\r\n/**\r\n * Checks if a hue range is narrower than another\r\n * \r\n * @param range1 - First hue range\r\n * @param range2 - Second hue range\r\n * @returns Boolean indicating if range1 is narrower than range2\r\n */\r\nfunction isHueRangeNarrower(\r\n  range1: [number, number],\r\n  range2: [number, number]\r\n): boolean {\r\n  const size1 = range1[0] <= range1[1] \r\n    ? range1[1] - range1[0] \r\n    : 360 - range1[0] + range1[1];\r\n  \r\n  const size2 = range2[0] <= range2[1]\r\n    ? range2[1] - range2[0]\r\n    : 360 - range2[0] + range2[1];\r\n  \r\n  return size1 < size2;\r\n}\r\n\r\n/**\r\n * Generates a color from a semantic mapping\r\n * \r\n * @param mapping - Semantic mapping with ranges for hue, saturation, and lightness\r\n * @returns Random HSL color within the specified ranges\r\n */\r\nfunction generateColorFromMapping(mapping: SemanticMapping): HSLColor {\r\n  // Select a random hue within the range\r\n  let hue: number;\r\n  \r\n  if (mapping.hueRange[0] <= mapping.hueRange[1]) {\r\n    // Standard range\r\n    hue = mapping.hueRange[0] + Math.random() * (mapping.hueRange[1] - mapping.hueRange[0]);\r\n  } else {\r\n    // Wraparound range (e.g., 340 to 20 degrees)\r\n    const totalRange = (360 - mapping.hueRange[0]) + mapping.hueRange[1];\r\n    const randomValue = Math.random() * totalRange;\r\n    hue = (mapping.hueRange[0] + randomValue) % 360;\r\n  }\r\n  \r\n  // Select random saturation and lightness within their ranges\r\n  const saturation = mapping.saturationRange[0] + \r\n                    Math.random() * (mapping.saturationRange[1] - mapping.saturationRange[0]);\r\n  const lightness = mapping.lightnessRange[0] + \r\n                   Math.random() * (mapping.lightnessRange[1] - mapping.lightnessRange[0]);\r\n  \r\n  return [Math.round(hue), Math.round(saturation), Math.round(lightness)];\r\n}\r\n\r\n/**\r\n * Determines the most appropriate harmony type based on semantic terms\r\n * \r\n * @param semanticTerms - Array of semantic descriptors\r\n * @returns The harmony type to use for palette generation\r\n */\r\nfunction determineHarmonyFromSemantics(semanticTerms: string[]): HarmonyType {\r\n  // Check if any terms map directly to a harmony type\r\n  for (const term of semanticTerms) {\r\n    if (HARMONY_MAPPINGS[term]) {\r\n      return HARMONY_MAPPINGS[term];\r\n    }\r\n  }\r\n  \r\n  // Default to analogous as it's generally pleasing\r\n  return 'analogous';\r\n}\r\n","import { useState } from 'react'\r\nimport { usePalette } from '../../../hooks/usePalette'\r\nimport { SEMANTIC_MAPPINGS } from '../../../algorithms/generation/semantic'\r\nimport './SemanticInput.css'\r\n\r\ninterface SemanticInputProps {\r\n  onClose: () => void;\r\n}\r\n\r\nconst SemanticInput: React.FC<SemanticInputProps> = ({ onClose }) => {\r\n  const { generatePalette } = usePalette()\r\n  const [selectedTerms, setSelectedTerms] = useState<string[]>([])\r\n\r\n  // Get available semantic terms from the mappings\r\n  const availableTerms = Object.keys(SEMANTIC_MAPPINGS).sort()\r\n\r\n  // Group terms by category for better organization\r\n  const termCategories = {\r\n    'Mood/Tone': ['calm', 'energetic', 'professional', 'vibrant', 'muted'],\r\n    'Style': ['vintage', 'minimalist', 'earthy', 'sophisticated'],\r\n    'Feel': ['warm', 'cool', 'dark', 'light']\r\n  }\r\n\r\n  const handleTermClick = (term: string) => {\r\n    if (selectedTerms.includes(term)) {\r\n      // Remove term if already selected\r\n      setSelectedTerms(selectedTerms.filter(t => t !== term))\r\n    } else {\r\n      // Add term if not already selected (limit to 3 terms)\r\n      if (selectedTerms.length < 3) {\r\n        setSelectedTerms([...selectedTerms, term])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    setSelectedTerms([])\r\n  }\r\n\r\n  const handleGenerateClick = () => {\r\n    generatePalette({\r\n      semanticTerms: selectedTerms,\r\n      preserveLocked: true\r\n    })\r\n  }\r\n\r\n  const renderTerms = (category: string, terms: string[]) => {\r\n    return (\r\n      <div className=\"term-category\" key={category}>\r\n        <h3>{category}</h3>\r\n        <div className=\"term-chips\">\r\n          {terms\r\n            .filter(term => SEMANTIC_MAPPINGS[term]) // Only show terms that have mappings\r\n            .sort()\r\n            .map(term => (\r\n              <button\r\n                key={term}\r\n                className={`term-chip ${selectedTerms.includes(term) ? 'selected' : ''}`}\r\n                onClick={() => handleTermClick(term)}\r\n              >\r\n                {term}\r\n              </button>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"semantic-input\">\r\n      <div className=\"selected-terms\">\r\n        <h3>Selected Terms ({selectedTerms.length}/3)</h3>\r\n        <div className=\"selected-chips\">\r\n          {selectedTerms.length > 0 ? (\r\n            selectedTerms.map(term => (\r\n              <span key={term} className=\"selected-chip\">\r\n                {term}\r\n                <button \r\n                  className=\"remove-term\" \r\n                  onClick={() => handleTermClick(term)}\r\n                  aria-label={`Remove ${term}`}\r\n                >\r\n                  ×\r\n                </button>\r\n              </span>\r\n            ))\r\n          ) : (\r\n            <p className=\"no-selections\">Select up to 3 terms below</p>\r\n          )}\r\n        </div>\r\n        {selectedTerms.length > 0 && (\r\n          <button className=\"clear-button\" onClick={handleClearClick}>\r\n            Clear All\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"term-categories\">\r\n        {Object.entries(termCategories).map(([category, terms]) => \r\n          renderTerms(category, terms)\r\n        )}\r\n      </div>\r\n\r\n      <button\r\n        className=\"generate-button\"\r\n        onClick={handleGenerateClick}\r\n        disabled={selectedTerms.length === 0}\r\n      >\r\n        Generate from Terms\r\n      </button>\r\n      <button \r\n        className=\"generate-button\"\r\n        onClick={onClose}\r\n      >\r\n        Close\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SemanticInput\r\n","import React, { useState } from 'react';\r\nimport './ImageUpload.css';\r\n\r\ninterface ImageUploadProps {\r\n  onClose: () => void;\r\n}\r\n\r\nconst ImageUpload: React.FC<ImageUploadProps> = ({ onClose }) => {\r\n  const [image, setImage] = useState<string | null>(null);\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        setImage(event.target?.result as string);\r\n      };\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = () => {\r\n    setImage(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"image-upload\">\r\n      <div className=\"image-preview-container\">\r\n        {image ? (\r\n          <div className=\"image-preview\">\r\n            <img src={image} alt=\"Uploaded preview\" />\r\n            <button className=\"remove-image\" onClick={handleRemoveImage}>\r\n              Remove\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <label className=\"upload-placeholder\" htmlFor=\"file-upload\">\r\n            <div className=\"upload-icon\">📁</div>\r\n            <p>Click to upload an image</p>\r\n            <p className=\"upload-hint\">JPG, PNG, or GIF up to 5MB</p>\r\n            <input\r\n              id=\"file-upload\"\r\n              type=\"file\"\r\n              className=\"file-input\"\r\n              accept=\"image/jpeg, image/png, image/gif\"\r\n              onChange={handleFileChange}\r\n            />\r\n          </label>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"color-count-selector\">\r\n        <label htmlFor=\"color-count\">Number of colors to extract:</label>\r\n        <select id=\"color-count\" defaultValue=\"5\">\r\n          <option value=\"3\">3</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"7\">7</option>\r\n        </select>\r\n      </div>\r\n\r\n      <button\r\n        className=\"generate-button\"\r\n        onClick={onClose}\r\n        disabled={!image}\r\n      >\r\n        Extract Colors\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useState } from 'react';\r\nimport SeedPicker from './SeedPicker';\r\nimport SemanticInput from './SemanticInput';\r\nimport ImageUpload from './ImageUpload';\r\nimport './InputDrawer.css';\r\n\r\ntype TabType = 'seed' | 'semantic' | 'image';\r\n\r\ninterface InputDrawerProps {\r\n  isOpen: boolean;\r\n  onClose: () => void; // We'll keep this prop for API consistency but won't use it\r\n}\r\n\r\nconst InputDrawer: React.FC<InputDrawerProps> = ({ isOpen }) => {\r\n  const [activeTab, setActiveTab] = useState<TabType>('seed');\r\n\r\n  return (\r\n    <div className={`input-panel ${isOpen ? 'visible' : ''}`}>\r\n      <div className=\"panel-header\">\r\n        <h2>Advanced Options</h2>\r\n      </div>\r\n      \r\n      <div className=\"panel-tabs\">\r\n        <button \r\n          className={`tab-button ${activeTab === 'seed' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('seed')}\r\n        >\r\n          Seed Color\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'semantic' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('semantic')}\r\n        >\r\n          Semantic Input\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'image' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('image')}\r\n        >\r\n          Image Upload\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"panel-content\">\r\n        {activeTab === 'seed' && <SeedPicker onClose={() => {}} />}\r\n        {activeTab === 'semantic' && <SemanticInput onClose={() => {}} />}\r\n        {activeTab === 'image' && <ImageUpload onClose={() => {}} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputDrawer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { usePalette } from '../hooks/usePalette';\r\nimport SwatchGrid from '../components/generate/PaletteBoard/SwatchGrid';\r\nimport InputDrawer from '../components/generate/InputDrawer/InputDrawer';\r\nimport { HarmonyType } from '../types/color';\r\nimport './GeneratePage.css';\r\n\r\nconst GeneratePage: React.FC = () => {\r\n  const { generatePalette, currentPalette } = usePalette();\r\n  \r\n  // Add state for palette size and harmony type\r\n  const [paletteSize, setPaletteSize] = useState(5);\r\n  const [harmonyType, setHarmonyType] = useState<HarmonyType>('analogous');\r\n  \r\n  // Remove isInputDrawerOpen state as drawer will always be visible\r\n  \r\n  // Generate a palette if none exists\r\n  useEffect(() => {\r\n    if (currentPalette.colors.length === 0) {\r\n      generatePalette({\r\n        paletteSize,\r\n        harmonyType,\r\n        preserveLocked: true,\r\n        mode: 'light'\r\n      });\r\n    }\r\n  }, [currentPalette.colors.length, generatePalette, paletteSize, harmonyType]);\r\n\r\n  // Handle generating a new palette\r\n  const handleGeneratePalette = () => {\r\n    generatePalette({\r\n      paletteSize,\r\n      harmonyType,\r\n      preserveLocked: true,\r\n      mode: 'light'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"generate-page\">\r\n      <div className=\"main-content-area\">\r\n        <div className=\"left-panel\">\r\n          <h1>Ultimate Color Generator</h1>\r\n          \r\n          <div className=\"controls-container\">\r\n            <div className=\"controls-group\">\r\n              <label htmlFor=\"palette-size\">Number of Colors:</label>\r\n              <select \r\n                id=\"palette-size\" \r\n                value={paletteSize} \r\n                onChange={(e) => setPaletteSize(Number(e.target.value))}\r\n                className=\"control-select\"\r\n              >\r\n                <option value=\"3\">3</option>\r\n                <option value=\"5\">5</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"9\">9</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"controls-group\">\r\n              <label htmlFor=\"harmony-type\">Harmony:</label>\r\n              <select \r\n                id=\"harmony-type\" \r\n                value={harmonyType} \r\n                onChange={(e) => setHarmonyType(e.target.value as HarmonyType)}\r\n                className=\"control-select\"\r\n              >\r\n                <option value=\"analogous\">Analogous</option>\r\n                <option value=\"complementary\">Complementary</option>\r\n                <option value=\"triadic\">Triadic</option>\r\n                <option value=\"tetradic\">Tetradic</option>\r\n                <option value=\"splitComplementary\">Split Complementary</option>\r\n                <option value=\"monochromatic\">Monochromatic</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <button \r\n              className=\"generate-button\" \r\n              onClick={handleGeneratePalette}\r\n            >\r\n              Generate New Palette\r\n            </button>\r\n            \r\n            {/* Advanced Options button removed */}\r\n          </div>\r\n          \r\n          <div className=\"palette-container\">\r\n            <SwatchGrid />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"right-panel\">\r\n          {/* InputDrawer always visible */}\r\n          <InputDrawer isOpen={true} onClose={() => {}} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneratePage;\r\n","import { usePalette } from '../../hooks/usePalette'\r\nimport { useContext } from 'react'\r\nimport { ThemeContext } from '../../context/ThemeContext'\r\nimport './WebpageMock.css'\r\n\r\nconst WebpageMock = () => {\r\n  const { roleAssignments, currentPalette } = usePalette()\r\n  const { theme } = useContext(ThemeContext)\r\n  \r\n  // Helper function to get a color by role, with fallbacks\r\n  const getColorByRole = (role: string) => {\r\n    // Find assigned color\r\n    if (roleAssignments[role]) {\r\n      const color = currentPalette.colors.find(c => c.id === roleAssignments[role])\r\n      if (color) return color.hex\r\n    }\r\n    \r\n    // Default colors based on theme\r\n    const defaults = {\r\n      light: {\r\n        primary: '#1a73e8',\r\n        secondary: '#6c757d',\r\n        accent: '#ff8a65',\r\n        background: '#ffffff',\r\n        surface: '#f5f5f5',\r\n        text: '#212121',\r\n        border: '#e0e0e0',\r\n        success: '#4caf50',\r\n        warning: '#ff9800',\r\n        error: '#f44336',\r\n        info: '#2196f3'\r\n      },\r\n      dark: {\r\n        primary: '#90caf9',\r\n        secondary: '#b0bec5',\r\n        accent: '#ff8a65',\r\n        background: '#121212',\r\n        surface: '#222222',\r\n        text: '#ffffff',\r\n        border: '#424242',\r\n        success: '#81c784',\r\n        warning: '#ffb74d',\r\n        error: '#e57373',\r\n        info: '#64b5f6'\r\n      }\r\n    }\r\n    \r\n    // Use TypeScript type assertion to address the indexing issue\r\n    const themeDefaults = defaults[theme as keyof typeof defaults]\r\n    return themeDefaults[role as keyof typeof themeDefaults] || themeDefaults.background\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"webpage-mock\"\r\n      style={{ \r\n        backgroundColor: getColorByRole('background'),\r\n        color: getColorByRole('text')\r\n      }}\r\n    >\r\n      <header \r\n        className=\"mock-header\"\r\n        style={{ backgroundColor: getColorByRole('primary') }}\r\n      >\r\n        <div className=\"header-content\">\r\n          <div className=\"logo\" style={{ color: '#ffffff' }}>Brand Logo</div>\r\n          <nav className=\"main-nav\">\r\n            <ul>\r\n              <li><a href=\"#\" style={{ color: '#ffffff' }}>Home</a></li>\r\n              <li><a href=\"#\" style={{ color: '#ffffff' }}>About</a></li>\r\n              <li><a href=\"#\" style={{ color: '#ffffff' }}>Services</a></li>\r\n              <li><a href=\"#\" style={{ color: '#ffffff' }}>Contact</a></li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n      \r\n      <div className=\"mock-hero\">\r\n        <div className=\"hero-content\">\r\n          <h1>Welcome to Your Website</h1>\r\n          <p>This preview shows how your color palette looks in a standard web layout.</p>\r\n          <button\r\n            style={{ \r\n              backgroundColor: getColorByRole('accent'),\r\n              color: '#ffffff'\r\n            }}\r\n          >\r\n            Get Started\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <main className=\"mock-content\">\r\n        <section className=\"features\">\r\n          <h2>Key Features</h2>\r\n          \r\n          <div className=\"feature-cards\">\r\n            {[1, 2, 3].map(i => (\r\n              <div \r\n                key={i}\r\n                className=\"feature-card\"\r\n                style={{ \r\n                  backgroundColor: getColorByRole('surface'),\r\n                  borderColor: getColorByRole('border')\r\n                }}\r\n              >\r\n                <div \r\n                  className=\"feature-icon\"\r\n                  style={{ backgroundColor: getColorByRole('secondary') }}\r\n                ></div>\r\n                <h3>Feature {i}</h3>\r\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n                <a \r\n                  href=\"#\" \r\n                  style={{ color: getColorByRole('primary') }}\r\n                >\r\n                  Learn more\r\n                </a>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </section>\r\n        \r\n        <section className=\"cta-section\">\r\n          <h2>Ready to get started?</h2>\r\n          <p>Join thousands of satisfied customers using our product.</p>\r\n          <div className=\"cta-buttons\">\r\n            <button\r\n              className=\"primary-btn\"\r\n              style={{ \r\n                backgroundColor: getColorByRole('primary'),\r\n                color: '#ffffff'\r\n              }}\r\n            >\r\n              Sign Up\r\n            </button>\r\n            <button\r\n              className=\"secondary-btn\"\r\n              style={{ \r\n                backgroundColor: 'transparent',\r\n                color: getColorByRole('secondary'),\r\n                borderColor: getColorByRole('secondary')\r\n              }}\r\n            >\r\n              Learn More\r\n            </button>\r\n          </div>\r\n        </section>\r\n      </main>\r\n      \r\n      <footer \r\n        className=\"mock-footer\"\r\n        style={{ \r\n          backgroundColor: theme === 'light' ? getColorByRole('surface') : getColorByRole('background'),\r\n          borderTopColor: getColorByRole('border')\r\n        }}\r\n      >\r\n        <div className=\"footer-content\">\r\n          <div className=\"footer-logo\">Brand Logo</div>\r\n          <div className=\"footer-links\">\r\n            <ul>\r\n              <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Home</a></li>\r\n              <li><a href=\"#\" style={{ color: getColorByRole('text') }}>About</a></li>\r\n              <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Services</a></li>\r\n              <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Contact</a></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"copyright\" style={{ color: getColorByRole('text') }}>\r\n          © 2023 Your Company. All rights reserved.\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WebpageMock\r\n","import React from 'react';\r\nimport { usePalette } from '../../hooks/usePalette';\r\nimport { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport './DashboardMock.css';\r\n\r\nconst DashboardMock: React.FC = () => {\r\n  const { roleAssignments, currentPalette } = usePalette();\r\n  const { theme } = useContext(ThemeContext);\r\n  \r\n  // Helper function to get color by role\r\n  const getColorByRole = (role: string) => {\r\n    // Find assigned color\r\n    if (roleAssignments[role]) {\r\n      const color = currentPalette.colors.find(c => c.id === roleAssignments[role]);\r\n      if (color) return color.hex;\r\n    }\r\n    \r\n    // Default fallback\r\n    return theme === 'light' ? '#f5f5f5' : '#333333';\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"dashboard-mock\"\r\n      style={{ \r\n        backgroundColor: getColorByRole('background'),\r\n        color: getColorByRole('text')\r\n      }}\r\n    >\r\n      <header \r\n        className=\"mock-sidebar\"\r\n        style={{ backgroundColor: getColorByRole('surface') }}\r\n      >\r\n        <div className=\"logo\" style={{ color: getColorByRole('primary') }}>DashBoard</div>\r\n        <nav>\r\n          <ul>\r\n            <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Dashboard</a></li>\r\n            <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Analytics</a></li>\r\n            <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Users</a></li>\r\n            <li><a href=\"#\" style={{ color: getColorByRole('text') }}>Settings</a></li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n      \r\n      <main className=\"dashboard-content\">\r\n        <div \r\n          className=\"dashboard-header\"\r\n          style={{ borderBottom: `1px solid ${getColorByRole('border')}` }}\r\n        >\r\n          <h1>Dashboard Preview</h1>\r\n        </div>\r\n        \r\n        <div className=\"dashboard-cards\">\r\n          {[1, 2, 3, 4].map(i => (\r\n            <div \r\n              key={i}\r\n              className=\"dashboard-card\"\r\n              style={{ \r\n                backgroundColor: getColorByRole('surface'),\r\n                borderColor: getColorByRole('border')\r\n              }}\r\n            >\r\n              <h3>Card Title {i}</h3>\r\n              <div className=\"card-value\">{Math.floor(Math.random() * 100)}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardMock;\r\n","import React from 'react';\r\nimport { usePalette } from '../../hooks/usePalette';\r\nimport { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport './MobileMock.css';\r\n\r\nconst MobileMock: React.FC = () => {\r\n  const { roleAssignments, currentPalette } = usePalette();\r\n  const { theme } = useContext(ThemeContext);\r\n  \r\n  // Helper function to get color by role\r\n  const getColorByRole = (role: string) => {\r\n    // Find assigned color\r\n    if (roleAssignments[role]) {\r\n      const color = currentPalette.colors.find(c => c.id === roleAssignments[role]);\r\n      if (color) return color.hex;\r\n    }\r\n    \r\n    // Default fallback\r\n    return theme === 'light' ? '#ffffff' : '#121212';\r\n  };\r\n\r\n  return (\r\n    <div className=\"mobile-mock-container\">\r\n      <div \r\n        className=\"mobile-device\"\r\n        style={{ borderColor: theme === 'light' ? '#d1d1d1' : '#333333' }}\r\n      >\r\n        <div \r\n          className=\"mobile-screen\"\r\n          style={{ backgroundColor: getColorByRole('background') }}\r\n        >\r\n          <div \r\n            className=\"mobile-status-bar\"\r\n            style={{ backgroundColor: getColorByRole('primary') }}\r\n          >\r\n            <span style={{ color: '#ffffff' }}>12:30</span>\r\n          </div>\r\n          \r\n          <div className=\"mobile-content\">\r\n            <h2 style={{ color: getColorByRole('text') }}>Mobile App</h2>\r\n            \r\n            <div \r\n              className=\"mobile-card\"\r\n              style={{ \r\n                backgroundColor: getColorByRole('surface'),\r\n                borderColor: getColorByRole('border')\r\n              }}\r\n            >\r\n              <h3 style={{ color: getColorByRole('text') }}>Welcome</h3>\r\n              <p style={{ color: getColorByRole('text') }}>This is a preview of your mobile app colors.</p>\r\n              <button\r\n                style={{ \r\n                  backgroundColor: getColorByRole('accent'),\r\n                  color: '#ffffff'\r\n                }}\r\n              >\r\n                Get Started\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"mobile-menu\">\r\n              <div \r\n                className=\"menu-item\"\r\n                style={{ color: getColorByRole('primary') }}\r\n              >\r\n                Home\r\n              </div>\r\n              <div \r\n                className=\"menu-item\"\r\n                style={{ color: getColorByRole('text') }}\r\n              >\r\n                Profile\r\n              </div>\r\n              <div \r\n                className=\"menu-item\"\r\n                style={{ color: getColorByRole('text') }}\r\n              >\r\n                Settings\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MobileMock;\r\n","import React from 'react';\r\nimport { usePalette } from '../../hooks/usePalette';\r\nimport { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeContext';\r\nimport './EmailMock.css';\r\n\r\nconst EmailMock: React.FC = () => {\r\n  const { roleAssignments, currentPalette } = usePalette();\r\n  const { theme } = useContext(ThemeContext);\r\n  \r\n  // Helper function to get color by role\r\n  const getColorByRole = (role: string) => {\r\n    // Find assigned color\r\n    if (roleAssignments[role]) {\r\n      const color = currentPalette.colors.find(c => c.id === roleAssignments[role]);\r\n      if (color) return color.hex;\r\n    }\r\n    \r\n    // Default fallback\r\n    return theme === 'light' ? '#ffffff' : '#121212';\r\n  };\r\n\r\n  return (\r\n    <div className=\"email-mock-container\">\r\n      <div \r\n        className=\"email-preview\"\r\n        style={{ \r\n          backgroundColor: '#f5f5f5',\r\n          padding: '20px'\r\n        }}\r\n      >\r\n        <div \r\n          className=\"email-card\"\r\n          style={{ \r\n            backgroundColor: getColorByRole('background'),\r\n            color: getColorByRole('text'),\r\n            border: `1px solid ${getColorByRole('border')}`\r\n          }}\r\n        >\r\n          <div \r\n            className=\"email-header\"\r\n            style={{ backgroundColor: getColorByRole('primary') }}\r\n          >\r\n            <h2 style={{ color: '#ffffff' }}>Company Newsletter</h2>\r\n          </div>\r\n          \r\n          <div className=\"email-body\">\r\n            <h3 style={{ color: getColorByRole('secondary') }}>\r\n              Welcome to Our Newsletter\r\n            </h3>\r\n            \r\n            <p style={{ color: getColorByRole('text') }}>\r\n              Thank you for subscribing to our newsletter. \r\n              Here's what's new this month.\r\n            </p>\r\n            \r\n            <div \r\n              className=\"email-callout\"\r\n              style={{ \r\n                backgroundColor: getColorByRole('surface'), \r\n                borderLeft: `4px solid ${getColorByRole('accent')}`\r\n              }}\r\n            >\r\n              <p style={{ color: getColorByRole('text') }}>\r\n                <strong>Special Offer:</strong> Use code WELCOME10 for 10% off your first purchase.\r\n              </p>\r\n            </div>\r\n            \r\n            <button\r\n              style={{ \r\n                backgroundColor: getColorByRole('accent'),\r\n                color: '#ffffff'\r\n              }}\r\n            >\r\n              Read More\r\n            </button>\r\n          </div>\r\n          \r\n          <div \r\n            className=\"email-footer\"\r\n            style={{ \r\n              borderTop: `1px solid ${getColorByRole('border')}`,\r\n              color: getColorByRole('text')\r\n            }}\r\n          >\r\n            <p>© 2023 Your Company. All rights reserved.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailMock;\r\n","import React, { useState } from 'react';\r\nimport { usePalette } from '../../hooks/usePalette';\r\nimport './ExportDrawer.css';\r\n\r\ninterface ExportDrawerProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ExportDrawer: React.FC<ExportDrawerProps> = ({ isOpen, onClose }) => {\r\n  const { currentPalette, roleAssignments } = usePalette();\r\n  const [selectedFormats, setSelectedFormats] = useState<string[]>(['css']);\r\n  \r\n  const toggleFormat = (format: string) => {\r\n    if (selectedFormats.includes(format)) {\r\n      setSelectedFormats(selectedFormats.filter(f => f !== format));\r\n    } else {\r\n      setSelectedFormats([...selectedFormats, format]);\r\n    }\r\n  };\r\n  \r\n  const handleExport = () => {\r\n    // Placeholder for export functionality\r\n    console.log('Exporting palette in formats:', selectedFormats);\r\n    onClose();\r\n  };\r\n  \r\n  if (!isOpen) return null;\r\n  \r\n  return (\r\n    <div className=\"export-drawer\">\r\n      <div className=\"drawer-header\">\r\n        <h2>Export Palette</h2>\r\n        <button className=\"close-button\" onClick={onClose} aria-label=\"Close\">\r\n          ×\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"export-options\">\r\n        <h3>Select Formats</h3>\r\n        \r\n        <div className=\"format-checkboxes\">\r\n          <label className=\"format-option\">\r\n            <input \r\n              type=\"checkbox\"\r\n              checked={selectedFormats.includes('css')}\r\n              onChange={() => toggleFormat('css')}\r\n            />\r\n            CSS Variables\r\n          </label>\r\n          \r\n          <label className=\"format-option\">\r\n            <input \r\n              type=\"checkbox\"\r\n              checked={selectedFormats.includes('scss')}\r\n              onChange={() => toggleFormat('scss')}\r\n            />\r\n            SCSS Variables\r\n          </label>\r\n          \r\n          <label className=\"format-option\">\r\n            <input \r\n              type=\"checkbox\"\r\n              checked={selectedFormats.includes('json')}\r\n              onChange={() => toggleFormat('json')}\r\n            />\r\n            JSON\r\n          </label>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"export-actions\">\r\n        <button className=\"export-button\" onClick={handleExport}>\r\n          Export Selected Formats\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportDrawer;\r\n","import { useState } from 'react'\r\nimport ExportDrawer from './ExportDrawer'\r\nimport './ExportButton.css'\r\n\r\ninterface ExportButtonProps {\r\n  disabled?: boolean\r\n}\r\n\r\nconst ExportButton = ({ disabled = false }: ExportButtonProps) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  \r\n  return (\r\n    <>\r\n      <button\r\n        className=\"export-button\"\r\n        onClick={() => setIsOpen(true)}\r\n        disabled={disabled}\r\n      >\r\n        Export Palette\r\n      </button>\r\n      \r\n      <ExportDrawer \r\n        isOpen={isOpen} \r\n        onClose={() => setIsOpen(false)} \r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ExportButton\r\n","import { useState } from 'react'\r\nimport { usePalette } from '../hooks/usePalette'\r\nimport { ThemeContext } from '../context/ThemeContext'\r\nimport { useContext } from 'react'\r\nimport WebpageMock from '../components/preview/WebpageMock'\r\nimport DashboardMock from '../components/preview/DashboardMock'\r\nimport MobileMock from '../components/preview/MobileMock'\r\nimport EmailMock from '../components/preview/EmailMock'\r\nimport ExportButton from '../components/export/ExportButton'\r\nimport './PreviewPage.css'\r\nimport React from 'react';\r\n\r\ntype PreviewTab = 'webpage' | 'dashboard' | 'mobile' | 'email'\r\n\r\nconst PreviewPage: React.FC = () => {\r\n  const [activeTab, setActiveTab] = useState<PreviewTab>('webpage')\r\n  const { currentPalette, roleAssignments } = usePalette()\r\n  const { theme, toggleTheme } = useContext(ThemeContext)\r\n\r\n  const hasValidPalette = currentPalette.colors.length > 0\r\n\r\n  const renderTabContent = () => {\r\n    if (!hasValidPalette) {\r\n      return (\r\n        <div className=\"no-palette-message\">\r\n          <h2>No palette available for preview</h2>\r\n          <p>Go to the Generate page to create a palette first.</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    switch (activeTab) {\r\n      case 'webpage':\r\n        return <WebpageMock />\r\n      case 'dashboard':\r\n        return <DashboardMock />\r\n      case 'mobile':\r\n        return <MobileMock />\r\n      case 'email':\r\n        return <EmailMock />\r\n      default:\r\n        return <WebpageMock />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"preview-page\">\r\n      <h1>Preview Your Palette</h1>\r\n      <p>This page will show your palette in different contexts:</p>\r\n      <ul>\r\n        <li>Website UI</li>\r\n        <li>Dashboard</li>\r\n        <li>Mobile App</li>\r\n        <li>Email Template</li>\r\n      </ul>\r\n      <div className=\"preview-placeholder\">\r\n        <p>Preview will be available once you've generated a palette.</p>\r\n      </div>\r\n      <div className=\"preview-header\">\r\n        <h1 className=\"page-title\">Preview Your Palette</h1>\r\n        \r\n        <div className=\"preview-controls\">\r\n          <button\r\n            className=\"theme-toggle-button\"\r\n            onClick={toggleTheme}\r\n            disabled={!hasValidPalette}\r\n          >\r\n            {theme === 'light' ? 'Switch to Dark Mode' : 'Switch to Light Mode'}\r\n          </button>\r\n          \r\n          <ExportButton disabled={!hasValidPalette} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"tabs-container\">\r\n        <div className=\"tabs\">\r\n          <button\r\n            className={`tab ${activeTab === 'webpage' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('webpage')}\r\n            disabled={!hasValidPalette}\r\n          >\r\n            Webpage\r\n          </button>\r\n          <button\r\n            className={`tab ${activeTab === 'dashboard' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('dashboard')}\r\n            disabled={!hasValidPalette}\r\n          >\r\n            Dashboard\r\n          </button>\r\n          <button\r\n            className={`tab ${activeTab === 'mobile' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('mobile')}\r\n            disabled={!hasValidPalette}\r\n          >\r\n            Mobile\r\n          </button>\r\n          <button\r\n            className={`tab ${activeTab === 'email' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('email')}\r\n            disabled={!hasValidPalette}\r\n          >\r\n            Email\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"tab-content\">\r\n          {renderTabContent()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PreviewPage\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './NotFound.css';\r\n\r\nconst NotFound: React.FC = () => {\r\n  return (\r\n    <div className=\"not-found\">\r\n      <h1>404 - Page Not Found</h1>\r\n      <p>The page you're looking for doesn't exist or has been moved.</p>\r\n      <Link to=\"/\" className=\"home-link\">\r\n        Go to Palette Generator\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useState } from 'react'\r\nimport { Routes, Route } from 'react-router-dom'\r\nimport { ThemeProvider } from './context/ThemeContext'\r\nimport { PaletteProvider } from './context/PaletteContext'\r\nimport { SettingsProvider } from './context/SettingsContext'\r\nimport { HistoryProvider } from './context/HistoryContext'\r\nimport Header from './components/layout/Header'\r\nimport Sidebar from './components/layout/Sidebar'\r\nimport GeneratePage from './pages/GeneratePage'\r\nimport PreviewPage from './pages/PreviewPage'\r\nimport NotFound from './pages/NotFound'\r\nimport './styles/global.css'\r\n\r\nfunction App() {\r\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(window.innerWidth < 1280)\r\n\r\n  const toggleSidebar = () => {\r\n    setSidebarCollapsed(prev => !prev)\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider>\r\n      <SettingsProvider>\r\n        <HistoryProvider>\r\n          <PaletteProvider>\r\n            <div className=\"app-container\">\r\n              <Header toggleSidebar={toggleSidebar} />\r\n              <div className=\"main-content\">\r\n                <Sidebar collapsed={sidebarCollapsed} />\r\n                <div className=\"page-container\">\r\n                  <Routes>\r\n                    <Route path=\"/\" element={<GeneratePage />} />\r\n                    <Route path=\"/preview\" element={<PreviewPage />} />\r\n                    <Route path=\"*\" element={<NotFound />} />\r\n                  </Routes>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </PaletteProvider>\r\n        </HistoryProvider>\r\n      </SettingsProvider>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './styles/global.css'\r\n\r\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n)\r\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","ThemeContext","createContext","ThemeProvider","children","theme","setTheme","useState","savedTheme","useEffect","toggleTheme","current","jsx","getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","generatePaletteFromSeed","seedColor","paletteSize","harmonyType","baseColors","s","generateAnalogousColors","generateMonochromaticColors","additionalCount","additionalColors","generateVariations","count","colors","angle","sideCount","lightness","variations","baseColor","lightnessAdjustment","newLightness","HistoryContext","HistoryProvider","maxSize","history","setHistory","currentIndex","setCurrentIndex","addToHistory","useCallback","palette","prev","updatedHistory","undo","newIndex","redo","PaletteContext","PaletteProvider","useContext","currentPalette","setCurrentPalette","uuidv4","roleAssignments","setRoleAssignments","createColorWithId","hsl","rgb","hslToRGB","rgbToHex","rgbToLAB","generateNewPalette","preserveLocked","lockedColors","color","hslColors","remainingSlots","newColors","newPalette","regeneratePalette","unlockedColor","newHarmony","remainingCount","updateColor","colorId","updates","updatedColors","lockColor","locked","updateRoleAssignments","assignments","reorderColors","startIndex","endIndex","result","removed","updatePalette","DEFAULT_SETTINGS","SettingsContext","SettingsProvider","settings","setSettings","savedSettings","updateSettings","newSettings","resetSettings","Header","toggleSidebar","jsxs","Sidebar","collapsed","navItems","NavLink","item","isActive","usePalette","paletteContext","historyContext","generatePalette","defaultOptions","adjustPalette","adjustedColors","index","newH","newS","newL","newHSL","newRGB","previousPalette","nextPalette","updatedColor","error","Swatch","size","copied","setCopied","isDark","pillBgColor","finalPillTextColor","handleCopyHex","handleToggleLock","SwatchGrid","gridClassName","SeedPicker","onClose","hexValue","setHexValue","hue","setHue","saturation","setSaturation","setLightness","setHarmonyType","hexColor","r","max","min","x","toHex","value","hex","handleHexChange","handleHueChange","handleSaturationChange","handleLightnessChange","handleHarmonyChange","handleGenerate","SEMANTIC_MAPPINGS","SemanticInput","selectedTerms","setSelectedTerms","termCategories","handleTermClick","term","t","handleClearClick","handleGenerateClick","renderTerms","category","terms","ImageUpload","image","setImage","handleFileChange","reader","event","_a","handleRemoveImage","InputDrawer","isOpen","activeTab","setActiveTab","GeneratePage","setPaletteSize","handleGeneratePalette","WebpageMock","getColorByRole","role","themeDefaults","DashboardMock","MobileMock","EmailMock","ExportDrawer","selectedFormats","setSelectedFormats","toggleFormat","format","handleExport","ExportButton","disabled","setIsOpen","Fragment","PreviewPage","hasValidPalette","renderTabContent","NotFound","Link","App","sidebarCollapsed","setSidebarCollapsed","Routes","Route","ReactDOM","React","BrowserRouter"],"mappings":"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","x_google_ignoreList":[0,1,2,4,5,6,7]}